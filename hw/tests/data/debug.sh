0110110011100110000000000011111001000000100010010011000100000001 (actual)
0110110011100110000000000011111001000000011100010011000100000001 (expected)


Encoded: 0
Encoded: 0
Encoded: 0
Encoded: 1
Encoded: 1
Encoded: 0
Encoded 1 bits: 0000000000000000000000000000000000000000000000000000000000110000
Encoded: 1
Encoded: 0
Encoded: 0
Encoded: 0
Encoded: 1
Encoded: 1
Encoded: 1
Encoded: 0
Encoded 6 bits: 0000000000000000000000000000000000000000000000000000011100000000
Encoded: 1
Encoded: 0
Encoded: 0
Encoded: 1
Encoded: 1
Encoded: 1
Encoded: 1
Encoded: 1
Encoded: 0
Encoded 11 bits: 0000000000000000000000000000000000000000000000000110010000000000
Encoded: 1
Encoded: 0
Encoded: 0
Encoded: 1
Encoded: 1
Encoded: 1
Encoded: 0
Encoded 15 bits: 0000000000000000000000000000000000000000000000001000010000110110
Encoded: 1
Encoded 16 bits: 0000000000000000000000000000000000000000000000000000010011000111
Encoded 16 bits: 0000000000000000000000000000000000000000000000000111110011110111
Encoded 16 bits: 0000000000000000000000000000000000000000000000000001100000000110
Encoded 16 bits: 0000000000000000000000000000000000000000000000000111110000111111
Encoded 16 bits: 0000000000000000000000000000000000000000000000000001101111001111
Encoded 16 bits: 0000000000000000000000000000000000000000000000000001111100000111
Encoded 16 bits: 0000000000000000000000000000000000000000000000000001101100001110
Encoded 16 bits: 0000000000000000000000000000000000000000000000001111111100001000
Encoded 16 bits: 0000000000000000000000000000000000000000000000001111110000000001
write_bits: 0000000000000000000000000000000000000000000000000000000100000001 (9 bits)
write_bit: 0
write_bit: 0
write_bit: 0
write_bit: 1
write_bit: 1
write_bit: 0
write_bit: 0
write_bit: 1
write_bit: 0
write_bit: 0
write_bit: 0
write_bit: 1
write_bit: 1
write_bit: 1
write_bit: 0
write_bits: 0000000000000000000000000000000000000000000000000000011100000000 (6 bits)
write_bit: 1
write_bit: 0
write_bit: 0
write_bit: 1
write_bit: 1
write_bit: 1
write_bit: 1
write_bit: 1
write_bit: 0
write_bits: 0000000000000000000000000000000000000000000000000110010000000000 (11 bits)
write_bit: 1
write_bit: 0
write_bit: 0
write_bit: 1
write_bit: 1
write_bit: 1
write_bit: 0
write_bits: 0000000000000000000000000000000000000000000000001000010000110110 (15 bits)
write_bit: 1
write_bits: 0000000000000000000000000000000000000000000000000000010011000111 (16 bits)
write_bits: 0000000000000000000000000000000000000000000000000111110011110111 (16 bits)
write_bits: 0000000000000000000000000000000000000000000000000001100000000110 (16 bits)
write_bits: 0000000000000000000000000000000000000000000000000111110000111111 (16 bits)
write_bits: 0000000000000000000000000000000000000000000000000001101111001111 (16 bits)
write_bits: 0000000000000000000000000000000000000000000000000001111100000111 (16 bits)
write_bits: 0000000000000000000000000000000000000000000000000001101100001110 (16 bits)
write_bits: 0000000000000000000000000000000000000000000000001111111100001000 (16 bits)
write_bits: 0000000000000000000000000000000000000000000000001111110000000001 (16 bits)


#* Encode a single block.
out_data[0] = 1011000001100111011110000110000111101100101110111111000100000001
out_data[1] = 0100011000110010000011100000110000011000111100010000111111000101
out_data[2] = 0111111000111100011000011100001001100110111100100001111011110010 != 0011111000111100011000011100001001100110111100100001111011110010
#! Bug: The encoding didn't stop and continued with nonesense. 
#! Then, it stopped at some point and continued with the correct encoding (see below marked place at [6]).
#^ I think the bug the the last group test or the shifting in bitplane encoding.
out_data[3] = 0100000011001110010111100011001001100111000011011010011000111110
out_data[4] = 1000000100111111101111100011000111111110111111111111111000001110
out_data[5] = 1111011111110010001000001100001111111001000000000010011011000001
out_data[6] = 0000000000000000000101110001100100101000000000000011000100001101

#* Encode 3 blocks.
out_data[0]  = 1011000001100111011110000110000111101100101110111111000100000001
out_data[1]  = 0100011000110010000011100000110000011000111100010000111111000101
out_data[2]  = 0111111000111100011000011100001001100110111100100001111011110010
out_data[3]  = 0100000011001110010111100011001001100111000011011010011000111110 != 0110110000011001110111100001100001111011001011101111110001000000
out_data[4]  = 1000000100111111101111100011000111111110111111111111111000001110 != 1001000110001100100000111000001100000110001111000100001111110001
out_data[5]  = 1111011111110010001000001100001111111001000000000010011011000001 != 0001111110001111000110000111000010011001101111001000011110111100
out_data[6]  = 111111000100000001 | 0101110001100100101000000000000011000100001101 != 0101101100000110011101111000011000011110110010111011111100010000
out_data[7]  = 0100001111110001011011000001100111011110000110000111101100101110 != 0010010001100011001000001110000011000001100011110001000011111100
out_data[8]  = 1000011110111100100100011000110010000011100000110000011000111100 != 0000001111100011110001100001110000100110011011110010000111101111
out_data[9]  = 0110100110001111100111111000111100011000011100001001100110111100
out_data[10] = 1111111110000011100100000011001110010111100011001001100111000011
out_data[11] = 0000100110110000011000000100111111101111100011000111111110111111
out_data[12] = 0000110001000011011111011111110010001000001100001111111001000000
out_data[13] = 0001111011001011101111110001000000010101110001100100101000000000
out_data[14] = 1100000110001111000100001111110001011011000001100111011110000110
out_data[15] = 0010011001101111001000011110111100100100011000110010000011100000
out_data[16] = 0010011001110000110110100110001111100111111000111100011000011100
out_data[17] = 0001111111101111111111111110000011100100000011001110010111100011
out_data[18] = 0011111110010000000000100110110000011000000100111111101111100011
out_data[19] = 1001001010000000000000110001000011011111011111110010001000001100
out_data[20] = 0000000000000000000000000000000000000000000000000000000101110001

#* Another input
out_data[0] = 0110011101111000011000011110110010111011111100000000000100000001
out_data[1] = 0011001000001110000011000001100011110001000011111100010 110110000 != 0000000000000000000000000000000000000000000000000000000110110000
out_data[0] = 0110011101111000011000011110110010111011111100000000000100000001
out_data[1] = 0011001000001110000011000001100011110001000011111100010110110000
out_data[2] = 0011110001100001110000100110011011110010000111101111001001000110
out_data[3] = 1100111001011110001100100110011100001101101001100011111001111110
out_data[4] = 0000000000111100001101011011110011111011111111100000101001000000






#* Outputs for 2 blocks. The last two buffers are wrong.
0110011101111000011000011110110010111011111100000000000100000001
1110000110000111101100101110111111000000000001000000010110110000
0000000000000000000000000000000000000000000001101100000110011101

#* Outputs followed by expected values.
111000011000011110110010111011111100000000000 1000000010 110110000
110011101 111000011000011110110010111011111100000000000 0 110110000

000000000000000000000000000000000000000000000 1101100000 110011101
000000000000000000000000000000000000000000000000000000 1101100000

#* Concatenated outputs.
#& Actually only one descrepancy.
1101100000110011101111000011000011110110010111011111100000000000 1000000010 110110000
1101100000110011101111000011000011110110010111011111100000000000 0          110110000


#* Single block works.
Stream idx: 2
out_data[0] = 0110011101111000011000011110110010111011111100000000000100000001
out_data[1] = 0000000000000000000000000000000000000000000000000000000110110000


#* But not with 2 (identical) blocks.
out_data[0] = 0010000000101101000000011101101010001011100101000000000100000001
out_data[1] = 1010100010111001010000000001000000010110110000011101110110100110 != 0000111011010100010111001010000000000110110000011101110110100110
out_data[2] = 0000000001101100000111011101101001100010000000101101000000011101 != 0000000000000000001101100000111011101101001100010000000101101000

#& The same descrepancy as above.
1101100000111011101101001100010000000101101000000011101101010001011100101000000000 1000000010 110110000011101110110100110
1101100000111011101101001100010000000101101000000011101101010001011100101000000000 0          110110000011101110110100110



#* Outputs for 4 blocks. The last 3 blocks are wrong.
Stream idx: 4
out_data[0] = 0110011101111000011000011110110010111011111100000000000100000001
out_data[1] = 1110000110000111101100101110111111000000000001000000010110110000 != 1100111011110000110000111101100101110111111000000000000110110000
out_data[2] = 0001111011001011101111110000000000010000000101101100000110011101 != 1001110111100001100001111011001011101111110000000000001101100000
out_data[3] = 0000000000000000000000000000000000011011000001100111011110000110 != 0000000000000000000000000000000000000000000000000000011011000001

[1]
111000011000011110110010111011111100000000000 1000000010 110110000
110011101 111000011000011110110010111011111100000000000 0 110110000

[2]
00011110110010111011111100000000000100000001          0 1101100000 110011101
100111011110000110 00011110110010111011111100000000000 0 1101100000

[3]
00000000000000000000000000000000000 11011000001 100111011110000110 
00000000000000000000000000000000000000000000000000000 11011000001